
controlBoxV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000003ea  0000047e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fd  00800106  00800106  00000484  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001890  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd9  00000000  00000000  00001eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ce7  00000000  00000000  00002cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  000039ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000840  00000000  00000000  00003cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000563  00000000  00000000  00004500  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00004a63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_7>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_18>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_28>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea ee       	ldi	r30, 0xEA	; 234
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 30       	cpi	r26, 0x06	; 6
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	22 e0       	ldi	r18, 0x02	; 2
  d8:	a6 e0       	ldi	r26, 0x06	; 6
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a3 30       	cpi	r26, 0x03	; 3
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  ea:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <__vector_7>:

	/* Disable transmitter and enable interrupt */
	UCSR1B &= (~(1<<TXEN1));
	UCSR1B |= (1<<RXCIE1);
	/* Set the dircetion of PINB3 to input */
	DDRB &= 0xF7;
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
  fe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <hal_init>:
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 11a:	95 e0       	ldi	r25, 0x05	; 5
 11c:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 120:	93 e6       	ldi	r25, 0x63	; 99
 122:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 126:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 12a:	08 95       	ret

0000012c <USART0_init>:
 12c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 130:	87 e6       	ldi	r24, 0x67	; 103
 132:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 136:	88 e9       	ldi	r24, 0x98	; 152
 138:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 142:	08 95       	ret

00000144 <USART0_setToReceive>:
 144:	54 9a       	sbi	0x0a, 4	; 10
 146:	5c 98       	cbi	0x0b, 4	; 11
 148:	e1 ec       	ldi	r30, 0xC1	; 193
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	87 7f       	andi	r24, 0xF7	; 247
 150:	80 83       	st	Z, r24
 152:	80 81       	ld	r24, Z
 154:	80 68       	ori	r24, 0x80	; 128
 156:	80 83       	st	Z, r24
 158:	51 98       	cbi	0x0a, 1	; 10
 15a:	08 95       	ret

0000015c <USART1_init>:
 15c:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 160:	87 e6       	ldi	r24, 0x67	; 103
 162:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 166:	88 e9       	ldi	r24, 0x98	; 152
 168:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
 16c:	86 e0       	ldi	r24, 0x06	; 6
 16e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
 172:	08 95       	ret

00000174 <USART1_setToTransmit>:
}

void USART1_setToTransmit(void) {
	/* Set the direction of PIND4 to output */
	DDRB |= 0x20;
 174:	25 9a       	sbi	0x04, 5	; 4
	/* Set PIND4 to HIGH */
	PORTB |= 0x20; // 0b00010000
 176:	2d 9a       	sbi	0x05, 5	; 5

	/* Enable transmitter and disable interrupt */
	UCSR1B |= (1<<TXEN1);
 178:	e9 ec       	ldi	r30, 0xC9	; 201
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	88 60       	ori	r24, 0x08	; 8
 180:	80 83       	st	Z, r24
	UCSR1B &= ~(1<<RXCIE1);
 182:	80 81       	ld	r24, Z
 184:	8f 77       	andi	r24, 0x7F	; 127
 186:	80 83       	st	Z, r24
 188:	08 95       	ret

0000018a <USART1_sendChar>:
}

void USART1_sendChar(unsigned char data) {
	/* Wait for empty transmit buffer */
	while ( !(UCSR1A & (1<<UDRE1)));
 18a:	e8 ec       	ldi	r30, 0xC8	; 200
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	90 81       	ld	r25, Z
 190:	95 ff       	sbrs	r25, 5
 192:	fd cf       	rjmp	.-6      	; 0x18e <USART1_sendChar+0x4>
	/* Put data into buffer, sends the data */
	UDR1 = data;
 194:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 198:	08 95       	ret

0000019a <USART1_sendString>:
}

void USART1_sendString(unsigned char *s) {
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	ec 01       	movw	r28, r24
	while(*s)
 1a0:	88 81       	ld	r24, Y
 1a2:	88 23       	and	r24, r24
 1a4:	61 f0       	breq	.+24     	; 0x1be <USART1_sendString+0x24>
 1a6:	21 96       	adiw	r28, 0x01	; 1
	{
		USART1_sendChar(*s);
 1a8:	0e 94 c5 00 	call	0x18a	; 0x18a <USART1_sendChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	8f e3       	ldi	r24, 0x3F	; 63
 1ae:	9f e1       	ldi	r25, 0x1F	; 31
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <USART1_sendString+0x16>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <USART1_sendString+0x1c>
 1b6:	00 00       	nop
	/* Put data into buffer, sends the data */
	UDR1 = data;
}

void USART1_sendString(unsigned char *s) {
	while(*s)
 1b8:	89 91       	ld	r24, Y+
 1ba:	81 11       	cpse	r24, r1
 1bc:	f5 cf       	rjmp	.-22     	; 0x1a8 <USART1_sendString+0xe>
	{
		USART1_sendChar(*s);
		_delay_ms(2);
		s++;
	}
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <stateMachine>:
 1c4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state>
 1c8:	88 23       	and	r24, r24
 1ca:	49 f0       	breq	.+18     	; 0x1de <stateMachine+0x1a>
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	29 f4       	brne	.+10     	; 0x1da <stateMachine+0x16>
 1d0:	0e 94 93 01 	call	0x326	; 0x326 <bus_process>
 1d4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <state>
 1d8:	08 95       	ret
 1da:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <state>
 1de:	08 95       	ret

000001e0 <__vector_18>:
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	ef 93       	push	r30
 1f0:	ff 93       	push	r31
 1f2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <writePointerU0>
 1f6:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1fa:	e8 2f       	mov	r30, r24
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	eb 56       	subi	r30, 0x6B	; 107
 200:	fe 4f       	sbci	r31, 0xFE	; 254
 202:	90 83       	st	Z, r25
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <state>
 20a:	83 36       	cpi	r24, 0x63	; 99
 20c:	18 f0       	brcs	.+6      	; 0x214 <__vector_18+0x34>
 20e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <writePointerU0>
 212:	03 c0       	rjmp	.+6      	; 0x21a <__vector_18+0x3a>
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <writePointerU0>
 21a:	ff 91       	pop	r31
 21c:	ef 91       	pop	r30
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <__vector_28>:
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	ef 93       	push	r30
 23c:	ff 93       	push	r31
 23e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <writePointerU1>
 242:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 246:	e8 2f       	mov	r30, r24
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	e0 5d       	subi	r30, 0xD0	; 208
 24c:	fe 4f       	sbci	r31, 0xFE	; 254
 24e:	90 83       	st	Z, r25
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <state>
 256:	83 36       	cpi	r24, 0x63	; 99
 258:	18 f0       	brcs	.+6      	; 0x260 <__vector_28+0x34>
 25a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <writePointerU1>
 25e:	03 c0       	rjmp	.+6      	; 0x266 <__vector_28+0x3a>
 260:	8f 5f       	subi	r24, 0xFF	; 255
 262:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <writePointerU1>
 266:	ff 91       	pop	r31
 268:	ef 91       	pop	r30
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <main>:
}

int main(void)
{
    /* initialize main features */
	sei();
 278:	78 94       	sei
	/* initialize UART interfaces */
	
	hal_init();
 27a:	0e 94 8a 00 	call	0x114	; 0x114 <hal_init>
	
	USART0_init();
 27e:	0e 94 96 00 	call	0x12c	; 0x12c <USART0_init>
	USART1_init();
 282:	0e 94 ae 00 	call	0x15c	; 0x15c <USART1_init>

	USART0_setToReceive();
 286:	0e 94 a2 00 	call	0x144	; 0x144 <USART0_setToReceive>
	USART1_setToTransmit();
 28a:	0e 94 ba 00 	call	0x174	; 0x174 <USART1_setToTransmit>

    while (1) 
    {
		
		stateMachine();
 28e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <stateMachine>
		//sendAddress();
    }
 292:	fd cf       	rjmp	.-6      	; 0x28e <main+0x16>

00000294 <bus_createAddressForNext>:
 extern uint8_t brightness;
 extern uint8_t lightmode;

 void bus_createAddressForNext(void)
 {
	addressFrame[0] = (START + MODEADR);
 294:	e0 e0       	ldi	r30, 0x00	; 0
 296:	f2 e0       	ldi	r31, 0x02	; 2
 298:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <START>
 29c:	8f 5f       	subi	r24, 0xFF	; 255
 29e:	80 83       	st	Z, r24
	addressFrame[1] = (toolID << 5) + (uint8_t)((address + 1) >> 4);
 2a0:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <address>
 2a4:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <address+0x1>
 2a8:	c9 01       	movw	r24, r18
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	92 95       	swap	r25
 2ae:	82 95       	swap	r24
 2b0:	8f 70       	andi	r24, 0x0F	; 15
 2b2:	89 27       	eor	r24, r25
 2b4:	9f 70       	andi	r25, 0x0F	; 15
 2b6:	89 27       	eor	r24, r25
 2b8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 2bc:	40 e2       	ldi	r20, 0x20	; 32
 2be:	94 9f       	mul	r25, r20
 2c0:	80 0d       	add	r24, r0
 2c2:	11 24       	eor	r1, r1
 2c4:	81 83       	std	Z+1, r24	; 0x01
	addressFrame[2] = ((uint8_t)((address + 1) << 4) + STOP);
 2c6:	2f 5f       	subi	r18, 0xFF	; 255
 2c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <STOP>
 2cc:	90 e1       	ldi	r25, 0x10	; 16
 2ce:	29 9f       	mul	r18, r25
 2d0:	80 0d       	add	r24, r0
 2d2:	11 24       	eor	r1, r1
 2d4:	82 83       	std	Z+2, r24	; 0x02
 2d6:	08 95       	ret

000002d8 <bus_createHello>:
 }

 void bus_createHello(void)
 {
	helloPacket[0] = (START + MODEHEL);
 2d8:	ed ef       	ldi	r30, 0xFD	; 253
 2da:	f1 e0       	ldi	r31, 0x01	; 1
 2dc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <START>
 2e0:	8b 5f       	subi	r24, 0xFB	; 251
 2e2:	80 83       	st	Z, r24
	helloPacket[1] = (address >> 1);
 2e4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <address>
 2e8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <address+0x1>
 2ec:	9c 01       	movw	r18, r24
 2ee:	36 95       	lsr	r19
 2f0:	27 95       	ror	r18
 2f2:	21 83       	std	Z+1, r18	; 0x01
	helloPacket[2] = ((address << 7) + (helloCode << 5) + STOP);
 2f4:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <helloCode>
 2f8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <STOP>
 2fc:	30 e2       	ldi	r19, 0x20	; 32
 2fe:	23 9f       	mul	r18, r19
 300:	90 0d       	add	r25, r0
 302:	11 24       	eor	r1, r1
 304:	87 95       	ror	r24
 306:	88 27       	eor	r24, r24
 308:	87 95       	ror	r24
 30a:	89 0f       	add	r24, r25
 30c:	82 83       	std	Z+2, r24	; 0x02
 30e:	08 95       	ret

00000310 <calculateReadPointer>:
 }

 void calculateReadPointer(void)
 {
	if (readPointerU0 >= (BUFFERSIZE - 1))
 310:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <readPointerU0>
 314:	83 36       	cpi	r24, 0x63	; 99
 316:	18 f0       	brcs	.+6      	; 0x31e <calculateReadPointer+0xe>
		readPointerU0 = 0;
 318:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <readPointerU0>
 31c:	08 95       	ret
	else readPointerU0++;
 31e:	8f 5f       	subi	r24, 0xFF	; 255
 320:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <readPointerU0>
 324:	08 95       	ret

00000326 <bus_process>:
 }

void bus_process()
{
 326:	cf 93       	push	r28
	/* 
	 * execute when the UART0 buffer is filled with three new bytes or a special flag 
	 * is set
	 * the query also considers the step over
	 */
	if (writePointerU0 >= (readPointerU0 + 3) || writePointerU0 < readPointerU0)
 328:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <writePointerU0>
 32c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <readPointerU0>
 330:	28 2f       	mov	r18, r24
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	69 2f       	mov	r22, r25
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	a9 01       	movw	r20, r18
 33a:	4d 5f       	subi	r20, 0xFD	; 253
 33c:	5f 4f       	sbci	r21, 0xFF	; 255
 33e:	64 17       	cp	r22, r20
 340:	75 07       	cpc	r23, r21
 342:	1c f4       	brge	.+6      	; 0x34a <bus_process+0x24>
 344:	98 17       	cp	r25, r24
 346:	08 f0       	brcs	.+2      	; 0x34a <bus_process+0x24>
 348:	4c c0       	rjmp	.+152    	; 0x3e2 <bus_process+0xbc>
	{
		if((bufferU0[readPointerU0]&0xF0) == START)
 34a:	f9 01       	movw	r30, r18
 34c:	eb 56       	subi	r30, 0x6B	; 107
 34e:	fe 4f       	sbci	r31, 0xFE	; 254
 350:	c0 81       	ld	r28, Z
 352:	9c 2f       	mov	r25, r28
 354:	90 7f       	andi	r25, 0xF0	; 240
 356:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <START>
 35a:	29 13       	cpse	r18, r25
 35c:	3f c0       	rjmp	.+126    	; 0x3dc <bus_process+0xb6>
		{	
			mode = (bufferU0[readPointerU0]&0x0F);
			calculateReadPointer();
 35e:	0e 94 88 01 	call	0x310	; 0x310 <calculateReadPointer>

			if((bufferU0[readPointerU0]&0xE0) == (toolID << 5))
 362:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <readPointerU0>
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	eb 56       	subi	r30, 0x6B	; 107
 36a:	fe 4f       	sbci	r31, 0xFE	; 254
 36c:	40 81       	ld	r20, Z
 36e:	24 2f       	mov	r18, r20
 370:	20 7e       	andi	r18, 0xE0	; 224
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 378:	50 e2       	ldi	r21, 0x20	; 32
 37a:	85 9f       	mul	r24, r21
 37c:	c0 01       	movw	r24, r0
 37e:	11 24       	eor	r1, r1
 380:	28 17       	cp	r18, r24
 382:	39 07       	cpc	r19, r25
 384:	71 f5       	brne	.+92     	; 0x3e2 <bus_process+0xbc>
	 */
	if (writePointerU0 >= (readPointerU0 + 3) || writePointerU0 < readPointerU0)
	{
		if((bufferU0[readPointerU0]&0xF0) == START)
		{	
			mode = (bufferU0[readPointerU0]&0x0F);
 386:	cf 70       	andi	r28, 0x0F	; 15
			calculateReadPointer();

			if((bufferU0[readPointerU0]&0xE0) == (toolID << 5))
			{
				switch(mode)
 388:	c1 30       	cpi	r28, 0x01	; 1
 38a:	59 f5       	brne	.+86     	; 0x3e2 <bus_process+0xbc>
				{
					/* addressing */
					case MODEADR:
						address = ((bufferU0[readPointerU0]&0x1F) << 4);
 38c:	4f 71       	andi	r20, 0x1F	; 31
 38e:	20 e1       	ldi	r18, 0x10	; 16
 390:	42 9f       	mul	r20, r18
 392:	c0 01       	movw	r24, r0
 394:	11 24       	eor	r1, r1
 396:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <address+0x1>
 39a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <address>
						calculateReadPointer();
 39e:	0e 94 88 01 	call	0x310	; 0x310 <calculateReadPointer>

						address += (bufferU0[readPointerU0] >> 4);
 3a2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <readPointerU0>
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	eb 56       	subi	r30, 0x6B	; 107
 3aa:	fe 4f       	sbci	r31, 0xFE	; 254
 3ac:	20 81       	ld	r18, Z
 3ae:	22 95       	swap	r18
 3b0:	2f 70       	andi	r18, 0x0F	; 15
 3b2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <address>
 3b6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <address+0x1>
 3ba:	82 0f       	add	r24, r18
 3bc:	91 1d       	adc	r25, r1
 3be:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <address+0x1>
 3c2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <address>
						calculateReadPointer();
 3c6:	0e 94 88 01 	call	0x310	; 0x310 <calculateReadPointer>

						bus_createAddressForNext();
 3ca:	0e 94 4a 01 	call	0x294	; 0x294 <bus_createAddressForNext>
						bus_createHello();
 3ce:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <bus_createHello>

						USART1_sendString(addressFrame);
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	92 e0       	ldi	r25, 0x02	; 2
 3d6:	0e 94 cd 00 	call	0x19a	; 0x19a <USART1_sendString>
					break;
 3da:	03 c0       	rjmp	.+6      	; 0x3e2 <bus_process+0xbc>
					break;

				}
			}
		}
		else readPointerU0++;
 3dc:	8f 5f       	subi	r24, 0xFF	; 255
 3de:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <readPointerU0>
	}
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <_exit>:
 3e6:	f8 94       	cli

000003e8 <__stop_program>:
 3e8:	ff cf       	rjmp	.-2      	; 0x3e8 <__stop_program>
